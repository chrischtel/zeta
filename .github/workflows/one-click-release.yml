name: One-Click Release

on:
  workflow_dispatch:
    inputs:
      releaseType:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      preReleaseType:
        description: 'Pre-release type (leave empty for full release)'
        required: false
        type: choice
        options:
          - none
          - alpha
          - beta
          - rc
      promoteToProd:
        description: 'Promote current pre-release to production'
        required: false
        type: boolean
        default: false

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
      is_prerelease: ${{ steps.extract_version.outputs.is_prerelease }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Setup Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.14.0
      
      - name: Run Tests
        run: zig build test
        
      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Actions"
      
      - name: Execute Version Update
        id: version_update
        shell: pwsh
        run: |
          if ($env:PROMOTE_TO_PROD -eq 'true') {
            ./release.ps1 promote -FromPreRelease
          } else {
            ./release.ps1 $env:RELEASE_TYPE -PreReleaseType $env:PRE_RELEASE_TYPE
          }
        env:
          RELEASE_TYPE: ${{ github.event.inputs.releaseType }}
          PRE_RELEASE_TYPE: ${{ github.event.inputs.preReleaseType }}
          PROMOTE_TO_PROD: ${{ github.event.inputs.promoteToProd }}
      
      - name: Extract Version
        id: extract_version
        shell: pwsh
        run: |
          # First check if the file exists and output its contents for debugging
          if (Test-Path "build.zig") {
            Write-Host "Contents of build.zig:"
            Get-Content "build.zig" | Select -First 10
          } else {
            Write-Host "build.zig file not found!"
            exit 1
          }
          
          # Try to find the version with a more flexible pattern
          $versionLine = Select-String -Path "build.zig" -Pattern 'VERSION'
          
          if ($null -ne $versionLine) {
            Write-Host "Found version line: $($versionLine.Line)"
            
            # Try different patterns that might match your version format
            if ($versionLine.Line -match 'VERSION\s*=\s*"([^"]*)"') {
              $version = $Matches[1]
              Write-Host "Extracted version: $version"
              
              if ($version -match '-') {
                echo "is_prerelease=true" >> $env:GITHUB_OUTPUT
                if ($version -match '\+') {
                  $cleanVersion = $version -replace '\+.*', ''
                  echo "version=$cleanVersion" >> $env:GITHUB_OUTPUT
                } else {
                  echo "version=$version" >> $env:GITHUB_OUTPUT
                }
              } else {
                echo "is_prerelease=false" >> $env:GITHUB_OUTPUT
                echo "version=$version" >> $env:GITHUB_OUTPUT
              }
            } else {
              Write-Host "Version line found but couldn't extract version with regex"
              Write-Host "Line content: $($versionLine.Line)"
              exit 1
            }
          } else {
            Write-Host "No VERSION pattern found in build.zig!"
            exit 1
          }
            
      - name: Push Changes and Tags
        run: |
          git push
          git push --tags
      
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ steps.extract_version.outputs.version }}"
          name: "${{ steps.extract_version.outputs.is_prerelease == 'true' && 'Pre-release: v' || 'Release: v' }}${{ steps.extract_version.outputs.version }}"
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ steps.extract_version.outputs.is_prerelease == 'true' }}
  
  build-and-upload:
    needs: prepare-release
    uses: ./.github/workflows/build-and-upload-release.yml
    with:
      upload_url: ${{ needs.prepare-release.outputs.upload_url }}
      ref_name: ${{ needs.prepare-release.outputs.version }}
    secrets: inherit
