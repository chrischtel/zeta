name: Build and Upload Release Assets

on:
  workflow_call:
    inputs:
      upload_url:
        required: true
        type: string
      ref_name:
        required: true
        type: string

jobs:
  build_and_upload:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux-x86_64
          - os: macos-latest
            platform: macos-aarch64
          - os: windows-latest
            platform: windows-x86_64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.14.0
      
      - name: Install Dependencies on Windows
        if: ${{ runner.os == 'Windows' }}
        uses: crazy-max/ghaction-chocolatey@v3.3.0
        with:
          args: install 7zip
      
      - name: Build
        run: zig build build-${{ matrix.platform }} -Doptimize=ReleaseFast
      
      - name: Package binaries
        shell: bash
        run: |
          mkdir -p dist
          echo "Checking build output structure:"
          find zig-out/bin -type f -name "*" | sort

          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            MINIMAL_BIN="zeta-${{ matrix.platform }}.exe"
            FULL_BIN="zetaf-${{ matrix.platform }}.exe"
          else
            MINIMAL_BIN="zeta-${{ matrix.platform }}"
            FULL_BIN="zetaf-${{ matrix.platform }}"
          fi

          # Create minimal package if binary exists
          if [ -f "zig-out/bin/${{ matrix.platform }}/$MINIMAL_BIN" ]; then
            echo "Creating minimal package..."
            if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
              cp zig-out/bin/${{ matrix.platform }}/$MINIMAL_BIN dist/zeta.exe
              7z a -tzip dist/zeta-minimal-${{ matrix.platform }}.zip dist/zeta.exe
              rm dist/zeta.exe
            else
              cp zig-out/bin/${{ matrix.platform }}/$MINIMAL_BIN dist/zeta
              tar czf dist/zeta-minimal-${{ matrix.platform }}.tar.gz -C dist zeta
              rm dist/zeta
            fi
          else
            echo "Skipping minimal package creation"
          fi

          # Create full package if binary exists
          if [ -f "zig-out/bin/${{ matrix.platform }}/$FULL_BIN" ]; then
            echo "Creating full package..."
            if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
              cp zig-out/bin/${{ matrix.platform }}/$FULL_BIN dist/zetaf.exe
              7z a -tzip dist/zeta-full-${{ matrix.platform }}.zip dist/zetaf.exe
              rm dist/zetaf.exe
            else
              cp zig-out/bin/${{ matrix.platform }}/$FULL_BIN dist/zetaf
              tar czf dist/zeta-full-${{ matrix.platform }}.tar.gz -C dist zetaf
              rm dist/zetaf
            fi
          else
            echo "Skipping full package creation"
          fi

          # Create complete package with all available binaries
          echo "Creating complete package with all available binaries..."
          cp -r zig-out/bin/${{ matrix.platform }}/* dist/ || echo "No binaries found"
          ls -la dist/
          if [ "$(ls -A dist)" ]; then
            if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
              7z a -tzip dist/zeta-complete-${{ matrix.platform }}.zip dist/*
            else
              tar czf dist/zeta-complete-${{ matrix.platform }}.tar.gz -C dist .
            fi
          else
            echo "No files available for complete package"
            exit 1
          fi
      
      - name: Upload Minimal Release Asset
        uses: actions/upload-release-asset@v1
        if: hashFiles('./dist/zeta-minimal-${{ matrix.platform }}.${{ runner.os == 'Windows' && 'zip' || 'tar.gz' }}') != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ inputs.upload_url }}
          asset_path: ./dist/zeta-minimal-${{ matrix.platform }}.${{ (matrix.os == 'windows-latest') && 'zip' || 'tar.gz' }}
          asset_name: zeta-minimal-${{ inputs.ref_name }}-${{ matrix.platform }}.${{ (matrix.os == 'windows-latest') && 'zip' || 'tar.gz' }}
          asset_content_type: application/${{ (matrix.os == 'windows-latest') && 'zip' || 'gzip' }}
      
      - name: Upload Full Release Asset
        uses: actions/upload-release-asset@v1
        if: hashFiles('./dist/zeta-full-${{ matrix.platform }}.${{ runner.os == 'Windows' && 'zip' || 'tar.gz' }}') != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ inputs.upload_url }}
          asset_path: ./dist/zeta-full-${{ matrix.platform }}.${{ (matrix.os == 'windows-latest') && 'zip' || 'tar.gz' }}
          asset_name: zeta-full-${{ inputs.ref_name }}-${{ matrix.platform }}.${{ (matrix.os == 'windows-latest') && 'zip' || 'tar.gz' }}
          asset_content_type: application/${{ (matrix.os == 'windows-latest') && 'zip' || 'gzip' }}
      
      - name: Upload Complete Release Asset
        uses: actions/upload-release-asset@v1
        if: hashFiles('./dist/zeta-complete-${{ matrix.platform }}.${{ runner.os == 'Windows' && 'zip' || 'tar.gz' }}') != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ inputs.upload_url }}
          asset_path: ./dist/zeta-complete-${{ matrix.platform }}.${{ (matrix.os == 'windows-latest') && 'zip' || 'tar.gz' }}
          asset_name: zeta-complete-${{ inputs.ref_name }}-${{ matrix.platform }}.${{ (matrix.os == 'windows-latest') && 'zip' || 'tar.gz' }}
          asset_content_type: application/${{ (matrix.os == 'windows-latest') && 'zip' || 'gzip' }}
