name: Create Release Candidate

on:
  workflow_dispatch:
    inputs:
      versionType:
        description: 'Version bump type'
        required: true
        default: 'minor'
        type: choice
        options:
          - major
          - minor
          - patch
      rcNumber:
        description: 'RC number (leave empty for first RC)'
        required: false
        default: ''

jobs:
  create-rc:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
      branch_name: ${{ steps.release_branch.outputs.name }}
    steps:
      - name: Checkout develop
        uses: actions/checkout@v3
        with:
          ref: develop
          fetch-depth: 0
          
      - name: Setup Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.14.0
      
      - name: Run Tests
        run: zig build test
        
      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Actions"
      
      - name: Extract current version
        id: current_version
        shell: pwsh
        run: |
          $versionLine = Select-String -Path "build.zig" -Pattern 'const VERSION'
          if ($versionLine -match 'const VERSION = "([\d\.]+)') {
            $version = $Matches[1]
            echo "version=$version" >> $env:GITHUB_OUTPUT
          }
      
      - name: Create or update release branch
        id: release_branch
        shell: pwsh
        run: |
          $currentVersion = "${{ steps.current_version.outputs.version }}"
          $versionParts = $currentVersion.Split('.')
          
          # Based on version type, determine the new version for branch naming
          switch ("${{ github.event.inputs.versionType }}") {
            "major" {
              $newMajor = [int]$versionParts[0] + 1
              $branchVersion = "$newMajor.0.0"
            }
            "minor" {
              $branchVersion = "$($versionParts[0]).$([int]$versionParts[1] + 1).0"
            }
            "patch" {
              $branchVersion = "$($versionParts[0]).$($versionParts[1]).$([int]$versionParts[2] + 1)"
            }
          }
          
          $branchName = "release/$branchVersion"
          echo "name=$branchName" >> $env:GITHUB_OUTPUT
          
          # Check if branch exists
          $branchExists = git ls-remote --heads origin $branchName
          
          if ($branchExists) {
            git checkout $branchName
            git pull
          } else {
            git checkout -b $branchName
          }
      
      - name: Update version for RC
        shell: pwsh
        run: |
          $rcNumber = "${{ github.event.inputs.rcNumber }}"
          if ([string]::IsNullOrEmpty($rcNumber)) {
            $rcNumber = "1"
          }
          
          ./release.ps1 ${{ github.event.inputs.versionType }} -PreReleaseType rc -PreReleaseVersion $rcNumber
      
      - name: Extract RC version
        id: extract_version
        shell: pwsh
        run: |
          $versionLine = Select-String -Path "build.zig" -Pattern 'const VERSION'
          if ($versionLine -match 'const VERSION = "(.*?)"') {
            $version = $Matches[1]
            echo "version=$version" >> $env:GITHUB_OUTPUT
          }
      
      - name: Push release branch
        run: |
          git push -u origin ${{ steps.release_branch.outputs.name }}
      
      - name: Create GitHub Pre-release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ steps.extract_version.outputs.version }}"
          name: "Release Candidate: v${{ steps.extract_version.outputs.version }}"
          body_path: CHANGELOG.md
          draft: false
          prerelease: true
      
      - name: Create PR for tracking
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.release_branch.outputs.name }}
          base: main
          title: 'Release ${{ steps.release_branch.outputs.name }}'
          body: |
            ## Release Candidate PR
            
            This PR tracks the release process for version `v${{ steps.extract_version.outputs.version }}`.
            
            ### Release Process
            1. Test this release candidate thoroughly
            2. Address any final bugs in this branch
            3. When ready for final release, use the "Finalize Release" workflow
            
            ### Changes in this release
            See [CHANGELOG.md](../blob/${{ steps.release_branch.outputs.name }}/CHANGELOG.md)
          draft: false
          labels: release
